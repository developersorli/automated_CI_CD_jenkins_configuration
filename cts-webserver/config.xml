<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.4">
      <projectUrl>ssh://git@10.0.2.15/home/git/repo.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.46.4">
      <projectNameList>
        <string>ci-job-cts-webserver</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.RunParameterDefinition>
          <name>APP_CTS</name>
          <projectName>cts-branch-build</projectName>
          <filter>SUCCESSFUL</filter>
        </hudson.model.RunParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.11.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>${JOB_NAME}</name>
        <url>ssh://git@10.0.2.15/home/git/repo.git/</url>
        <credentialsId>6077620c-1a9f-45ee-9072-3fb08a0a62e7</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.46.4">
      <project>${APP_CTS_JOBNAME}</project>
      <filter>metadataCTS.txt</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.SpecificBuildSelector">
        <buildNumber>${APP_CTS_NUMBER}</buildNumber>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.80">
      <scriptText>@Grab(group=&apos;org.yaml&apos;, module=&apos;snakeyaml&apos;, version=&apos;1.18&apos;)
import org.yaml.snakeyaml.Yaml
import hudson.model.Job
import hudson.model.ParametersAction
import hudson.model.Queue
import jenkins.model.Jenkins

import hudson.EnvVars;
import hudson.slaves.EnvironmentVariablesNodeProperty;
import hudson.slaves.NodeProperty;
import hudson.slaves.NodePropertyDescriptor;
import hudson.util.DescribableList;
import jenkins.model.Jenkins;

def workspace = getBinding().getVariables()[&apos;WORKSPACE&apos;]

def jobParameters = new Yaml().load(new FileReader(new File(workspace, &quot;metadataCTS.txt&quot;)))
for (view in jobParameters) {
	for (job in view.value) {
		if (job.key == &quot;project_branch&quot;) {
			branch = job.value
		}
	}
}

public createGlobalEnvironmentVariables(String key, String value){
 
       Jenkins instance = Jenkins.getInstance();
 
       DescribableList&lt;NodeProperty&lt;?&gt;, NodePropertyDescriptor&gt; globalNodeProperties = instance.getGlobalNodeProperties();
       List&lt;EnvironmentVariablesNodeProperty&gt; envVarsNodePropertyList = globalNodeProperties.getAll(EnvironmentVariablesNodeProperty.class);
 
       EnvironmentVariablesNodeProperty newEnvVarsNodeProperty = null;
       EnvVars envVars = null;
 
       if ( envVarsNodePropertyList == null || envVarsNodePropertyList.size() == 0 ) {
           newEnvVarsNodeProperty = new hudson.slaves.EnvironmentVariablesNodeProperty();
           globalNodeProperties.add(newEnvVarsNodeProperty);
           envVars = newEnvVarsNodeProperty.getEnvVars();
       } else {
           envVars = envVarsNodePropertyList.get(0).getEnvVars();
       }
       envVars.put(key, value)
       instance.save()
}

createGlobalEnvironmentVariables(&apos;BRANCH_OF_PROJECT&apos;,branch)</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <failOnSeedCollision>false</failOnSeedCollision>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.46.4">
      <project>cts-branch-build</project>
      <filter>service/target/spring-boot-test.jar</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.SpecificBuildSelector">
        <buildNumber>${APP_CTS_NUMBER}</buildNumber>
      </selector>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>
cd service
echo &quot;Release ${BRANCH_OF_PROJECT}-${JOB_NAME}:${BUILD_NUMBER}&quot; &gt;&gt; index.html
docker build -t ${BRANCH_OF_PROJECT}-${JOB_NAME}:${BUILD_NUMBER} .
#docker commit $(docker ps -lq) ${BRANCH_OF_PROJECT}_${JOB_NAME}:${BUILD_NUMBER}
docker tag ${BRANCH_OF_PROJECT}-${JOB_NAME}:${BUILD_NUMBER} localhost/${BRANCH_OF_PROJECT}-${JOB_NAME}:${BUILD_NUMBER}
docker push localhost/${BRANCH_OF_PROJECT}-${JOB_NAME}:${BUILD_NUMBER}</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>
echo &quot;service:
  name: ${JOB_NAME}
  repo_url : $GIT_URL
  docker_image: ${BRANCH_OF_PROJECT}-${JOB_NAME}
  revision: ${BUILD_NUMBER}&quot; &gt; metadataDocker.txt
        </command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>metadataDocker.txt</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>true</onlyIfSuccessful>
      <fingerprint>true</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
      <followSymlinks>true</followSymlinks>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.BuildTrigger>
      <childProjects>ci-job-cts-webserver</childProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </hudson.tasks.BuildTrigger>
  </publishers>
  <buildWrappers/>
</project>